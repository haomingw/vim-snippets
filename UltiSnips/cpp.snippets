extends c

snippet std "use namespace std" b
using namespace std;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:T}>
endsnippet

snippet cls "class" b
class ${1:Class} {
public:
	$1();
	~$1();
private:
};
endsnippet

snippet all "begin..end" w
$1.begin(), $1.end()
endsnippet

snippet ctl "cout..endl" b
cout << $1 << endl;
endsnippet

snippet pb "push_back" w
push_back($1);
endsnippet

snippet mp "make_pair" w
make_pair($1)
endsnippet

snippet pq "priority queue" b
priority_queue<${1:int}> ${2:name};
endsnippet

snippet rpq "reverse priority queue" b
priority_queue<${1:int}, vector<$1>, greater<$1> > ${2:name};
endsnippet

snippet io "fast io" w
ios_base::sync_with_stdio(0), cin.tie(0);
endsnippet

snippet xming "my template" b
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <utility>
#include <algorithm>
#include <map>
#include <unordered_map>
#include <bitset>
#include <numeric>
#include <cassert>
using namespace std;

#define REPP(i,a,b) for(int i = (a); i < (b); ++i)
#define REP(i,a) for(int i = 0; i < (a); ++i)
#define PER(i,a) for(int i = (a) - 1; i >= 0; --i)
#define SZ(x) ((int)(x).size())
#define ALL(x) (x).begin(), (x).end()
#define MP make_pair

typedef long long ll;
typedef pair<int, int> pii;
$0
endsnippet

snippet codejam "main function for codejam" b
void solve() {
	${VISUAL}$0
}

int main() {
	ios_base::sync_with_stdio(0), cin.tie(0);
	int T;
	cin >> T;
	REP(i, T) {
		cout << "Case #" << i + 1 << ": ";
		solve();
	}
	return 0;
}
endsnippet

snippet hash "main function for hashcode" b
int main(int argc, char* argv[]) {
	ios_base::sync_with_stdio(0), cin.tie(0);
#ifdef LOCAL
	assert(argc == 2);
	string input = argv[1], ext = ".in";
	assert(SZ(input) > SZ(ext) && input.substr(SZ(input) - SZ(ext)) == ext);
	string output = "output/" + input.substr(0, input.size() - SZ(ext)) + ".out";

	freopen(input.c_str(), "r", stdin);
	freopen(output.c_str(), "w", stdout);
#endif
	${VISUAL}$0
	return 0;
}
endsnippet

snippet db "debug" w
template <typename A, typename B>
string to_string(pair<A, B> p);

template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);

template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);

string to_string(const string& s) {
	return '"' + s + '"';
}

string to_string(const char* s) {
	return to_string((string) s);
}

string to_string(bool b) {
	return (b ? "true" : "false");
}

string to_string(vector<bool> v) {
	bool first = true;
	string res = "{";
	for (int i = 0; i < static_cast<int>(v.size()); i++) {
		if (!first) {
			res += ", ";
		}
		first = false;
		res += to_string(v[i]);
		}
	res += "}";
	return res;
}

template <size_t N>
string to_string(bitset<N> v) {
	string res = "";
	for (size_t i = 0; i < N; i++) {
		res += static_cast<char>('0' + v[i]);
	}
	return res;
}

template <typename A>
string to_string(A v) {
	bool first = true;
	string res = "{";
	for (const auto &x : v) {
		if (!first) {
			res += ", ";
		}
		first = false;
		res += to_string(x);
	}
	res += "}";
	return res;
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
	return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
	return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}

template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
	return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
	cerr << " " << to_string(H);
	debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif
endsnippet

