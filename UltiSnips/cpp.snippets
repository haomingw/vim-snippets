extends c

snippet std "use namespace std" b
using namespace std;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:T}>
endsnippet

snippet cls "class" b
class ${1:Class} {
public:
	$1();
	~$1();
private:
};
endsnippet

snippet all "begin..end" w
$1.begin(), $1.end()
endsnippet

snippet ctl "cout..endl" b
cout << $1 << endl;
endsnippet

snippet pb "push_back" w
push_back($1);
endsnippet

snippet mp "make_pair" w
make_pair($1)
endsnippet

snippet pq "priority queue" b
priority_queue<${1:int}> ${2:name};
endsnippet

snippet rpq "reverse priority queue" b
priority_queue<${1:int}, vector<$1>, greater<$1> > ${2:name};
endsnippet

snippet io "fast io" w
ios_base::sync_with_stdio(false), cin.tie(0);
endsnippet

snippet rand "random number generator" w
mt19937 rng(${1:58});
endsnippet

snippet xming "my template" b
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>
using namespace std;

#define REPP(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, a) for (int i = 0; i < (a); ++i)
#define PER(i, a) for (int i = (a)-1; i >= 0; --i)
#define SZ(x) ((int)(x).size())
#define ALL(x) (x).begin(), (x).end()
#define MP make_pair

typedef long long ll;
typedef pair<int, int> pii;
$0
endsnippet

snippet cf "main function for codeforces" b
void solve() {
	${VISUAL}$0
}

int main() {
	int t;
	scanf("%d", &t);
	while (t--) solve();
	return 0;
}
endsnippet

snippet cj "main function for codejam" b
void solve() {
	${VISUAL}$0
}

int main() {
	ios_base::sync_with_stdio(false), cin.tie(0);
	int T;
	cin >> T;
	REP(i, T) {
		cout << "Case #" << i + 1 << ": ";
		solve();
	}
	return 0;
}
endsnippet

snippet hash "main function for hashcode" b
int main(int argc, char* argv[]) {
	ios_base::sync_with_stdio(false), cin.tie(0);
#ifdef LOCAL
	assert(argc == 2);
	string input = argv[1], ext = ".in";
	assert(SZ(input) > SZ(ext) && input.substr(SZ(input) - SZ(ext)) == ext);
	string output = "output/" + input.substr(0, input.size() - SZ(ext)) + ".out";

	freopen(input.c_str(), "r", stdin);
	freopen(output.c_str(), "w", stdout);
#endif
	${VISUAL}$0
	return 0;
}
endsnippet

snippet at "main function for atcoder" b
int main() {
	ios_base::sync_with_stdio(false), cin.tie(0);
	${VISUAL}$0
	return 0;
}
endsnippet

snippet maxflow "maxflow template" b
template <typename T>
struct MaxFlow {
	static const int MAXV = 10000, MAXE = 10000; // E * 2
	T cap[MAXE], flow[MAXE];
	int to[MAXE], prev[MAXE], last[MAXV], used[MAXV], level[MAXV];
	int V, E;

	MaxFlow(int n) {
		V = n, E = 0;
		for (int i = 0; i < V; i++) last[i] = -1;
	}

	void add_edge(int x, int y, T c) {
		cap[E] = c, flow[E] = 0, to[E] = y, prev[E] = last[x];
		last[x] = E++;
		cap[E] = 0, flow[E] = 0, to[E] = x, prev[E] = last[y];
		last[y] = E++;
	}

	bool bfs(int s, int t) {
		for (int i = 0; i < V; i++) level[i] = -1;
		queue<int> q;
		q.push(s);
		level[s] = 0;
		while (!q.empty()) {
			int x = q.front();
			q.pop();
			for (int i = last[x]; i >= 0; i = prev[i]) {
				if (level[to[i]] == -1 && cap[i] > flow[i]) {
					q.push(to[i]);
					level[to[i]] = level[x] + 1;
				}
			}
		}
		return level[t] != -1;
	}

	T dfs(int u, int v, T maxc) {
		if (u == v) return maxc;
		for (int i = used[u]; i >= 0; used[u] = i = prev[i]) {
			if (level[to[i]] > level[u] && cap[i] > flow[i]) {
				T tmp = dfs(i, v, min(maxc, cap[i] - flow[i]));
				if (tmp > 0) {
					flow[i] += tmp, flow[i ^ 1] -= tmp;
					return tmp;
				}
			}
		}
		return 0;
	}

	T solve(int s, int t) {
		while (bfs(s, t)) {
			for (int i = 0; i < V; i++) used[i] = last[i];
			dfs(s, t, numeric_limits<T>::max());
		}
		T ans = 0;
		for (int i = last[s]; i >= 0; i = prev[i]) ans += flow[i];
		return ans;
	}
};
endsnippet
