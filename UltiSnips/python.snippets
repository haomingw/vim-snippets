snippet head "Shebang header for python scripts" b
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# author: `!v g:snips_author`
$0
endsnippet

snippet if "if" w
if ${1:expression}:
	${2:pass}
$0
endsnippet

snippet ifel "if/else" w
if ${1:expression}:
	${2:pass}
else:
	${3:pass}
$0
endsnippet

snippet elif "elif" w
elif ${1:expression}:
	${2:pass}
$0
endsnippet

snippet el "else" w
else ${1:expression}:
	${2:pass}
$0
endsnippet

snippet wh "while loop" w
while ${1:expression}:
	${2:pass}
$0
endsnippet

snippet def "function definition" w
def ${1:funcname}(${2:parameters}):
	${3:pass}
$0
endsnippet

snippet defm "method" w
def ${1:funcname}(self, ${2:parameters}):
	${3:pass}
$0
endsnippet

snippet defs "static method" w
@staticmethod
def ${1:funcname}(${2:parameters}):
	${3:pass}
$0
endsnippet

snippet defc "class method" w
@classmethod
def ${1:funcname}(cls, ${2:parameters}):
	${3:pass}
$0
endsnippet

snippet " "docstring" w
"""$1"""
endsnippet

snippet main "main function" b
if __name__ == '__main__':
	${VISUAL}$0
endsnippet

snippet ld "lambda function" w
lambda ${1:x}: ${2:pass}
endsnippet

snippet cls "class" b
class ${1:Class}:
	def __init__(self$2):
		${3:pass}
endsnippet

snippet meta "metaclass" b
class ${1:Class}Metaclass(type):
    def __new__(cls, name, bases, attrs):
        $2
        return type.__new__(cls, name, bases, attrs)
endsnippet

snippet str "to string method" b
def __str__(self):
	${1:pass}
endsnippet

snippet repr "to representation method" b
def __repr__(self):
	${1:pass}
endsnippet
